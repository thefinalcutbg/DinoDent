#include "EDental.h"

#include <array>
#include <map>
#include <unordered_map>
#include <algorithm>

#include "Model/User.h"
#include <TinyXML/tinyxml.h>
#include "View/ModalDialogBuilder.h"
#include "Model/Dental/ToothContainer.h"
#include "HISHistoryAlgorithms.h"
#include "Model/FreeFunctions.h"

#define sendAutoGeneratedExam

bool EDental::Open::sendRequest(
    const AmbList& ambSheet, 
    const Patient& patient, 
	decltype(m_callback) nrnCallback
)
{
	m_callback = nrnCallback;

	std::string contents;

	bool isNhif = ambSheet.isNhifSheet();

	bool adverseConditions = isNhif && ambSheet.nhifData.isUnfavourable;

	contents.reserve(4000);

	contents +=
		"<nhis:dentalTreatment>"
		+ bind("lrn", ambSheet.lrn)
		//+ bind("basedOn", ambSheet.basedOn) //needs closing functionality
			+ bind("treatmentStart", FreeFn::LocalToUTC(ambSheet.date))
			//+ bind("treatmentEnd", ambSheet.time.to8601(ambSheet.getDate())) //TO IMPLEMENT!!!
			+ bind("adverseConditions", adverseConditions)
			+ bind("rhifAreaNumber", patient.city.getRhif() + patient.city.getHealthRegion())
			+ "<nhis:medicalStatus />" //TO IMPLEMENT!!!
			+ getProcedures(ambSheet.procedures, ambSheet.teeth, ambSheet.date)
		+"</nhis:dentalTreatment>"
		+ HisService::subject(patient)
		+ HisService::performer()
	;		

	return HisService::sendRequestToHis(contents);
}

std::string EDental::Open::getProcedures(const ProcedureContainer& procedures, const ToothContainer& teeth, const Date& treatmentStartDate)
{

	std::string result;

	result.reserve(1000);

	ToothContainer teethChanged = teeth;

#ifdef sendAutoGeneratedExam
	result += HisService::initialStatusAsProcedure(teeth, treatmentStartDate);
	int sequence = 1;
#else
	int sequence = 0;
#endif

	for (auto& p : procedures)
	{
		sequence++;
		result += HisService::getProcedure(p, teeth, teethChanged, sequence);
	}

	return result;

}

void EDental::Open::parseReply(const std::string& reply)
{
	if (reply.empty()) {
		m_callback = nullptr;
		return;
	}

	auto errors = getErrors(reply);

	if (errors.size()) {
		
		if (FreeFn::contains(errors, "Вече има подаден")) {
			auto existingNrn = errors.substr(errors.size() - 12);
			m_callback(existingNrn, {}, true);
			return;
		}

		ModalDialogBuilder::showError(errors);
		m_callback = nullptr;
		return;


	}

	TiXmlDocument doc;

	doc.Parse(reply.data(), 0, TIXML_ENCODING_UTF8);

	TiXmlHandle docHandle(&doc);

	auto nrn = docHandle.
		FirstChild(). //message
		Child(1).	  //contents
		FirstChildElement().ToElement(); //nrn

	std::string nrnStr;

	if (nrn) {
		nrnStr = nrn->Attribute("value");
	}

	std::vector<int> procedureIndex;

	auto contents = docHandle.
		FirstChild(). //message
		Child(1);	  //contents


	//dentalProcedures
	for (int i = 3; contents.Child(i).ToElement(); i++)
	{
		auto index = std::stoi(contents.Child(i).Child(1).ToElement()->Attribute("value"));
		auto sequence = std::stoi(contents.Child(i).Child(0).ToElement()->Attribute("value"));

#ifdef sendAutoGeneratedExam
		if (sequence == 1) continue; //the first procedure is always the initial status
#endif
		//index
		procedureIndex.push_back(index);
	}

	m_callback(nrnStr, procedureIndex, false);

}


bool EDental::Augment::sendRequest(const AmbList& ambSheet, const Patient& patient, std::function<void(const std::map<int, int>& procedureIndexes)> callback)
{
	m_callback = callback;

	std::string contents;

	bool isNhif = ambSheet.isNhifSheet();

	bool adverseConditions = isNhif && ambSheet.nhifData.isUnfavourable;

	contents.reserve(4000);

	std::string resultingDocuments = "<nhis:documents>";

	for(auto& ref : ambSheet.referrals) resultingDocuments += bind("nrnReferral", ref.nrn);

	//implement prescriptions and medical notices here

	resultingDocuments += "</nhis:documents>";

	contents +=
		"<nhis:dentalTreatment>"
		+ bind("nrnDental", ambSheet.nrn)
		//+ bind("basedOn", ambSheet.basedOn)
		+ bind("treatmentStart", ambSheet.date)
		+ bind("adverseConditions", adverseConditions)
		+ bind("rhifAreaNumber", patient.city.getRhif() + patient.city.getHealthRegion())
		+ "<nhis:medicalStatus />" //TO IMPLEMENT!!!
		+ resultingDocuments
		+ getProcedures(ambSheet.procedures, ambSheet.teeth, ambSheet.date)
		+ "</nhis:dentalTreatment>"
		+ HisService::subject(patient)
		+ HisService::performer()
		;

	return HisService::sendRequestToHis(contents);
}

std::string EDental::Augment::getProcedures(const ProcedureContainer& procedures, const ToothContainer& teeth, const Date& treatmentStartDate)
{
	
	std::string result;

	result.reserve(1000);

#ifdef sendAutoGeneratedExam
	result += HisService::initialStatusAsProcedure(teeth, treatmentStartDate, true);
	int sequence = 1;
#else
	int sequence = 0;
#endif

	ToothContainer teethChanged = teeth;

	for (auto& p : procedures)
	{
		sequence++;

		result += HisService::getProcedure(p, teeth, teethChanged, sequence);

	}

	sequence = 999;

	for (auto& p : procedures.removedProcedures()) {

		sequence++;

		result += "<nhis:dentalProcedure>";

		result += bind("sequence", sequence);

		result += bind("index", p.his_index);

		result += bind("code", p.code.code());

		result += bind("status", 7);

		result += bind("type", p.code.hisType());

		result += bind("datePerformed", p.date.to8601());

		result += bind("financingSource", static_cast<int>(p.financingSource));

		result += "</nhis:dentalProcedure>";

	}
	
	return result;
	
}

void EDental::Augment::parseReply(const std::string& reply)
{
	if (reply.empty()) {
		m_callback = nullptr;
		return;
	}

	auto errors = getErrors(reply);

	if (errors.size()) {
		ModalDialogBuilder::showError(errors);
		m_callback = nullptr;
		return;
	}


	TiXmlDocument doc;

	doc.Parse(reply.data(), 0, TIXML_ENCODING_UTF8);

	TiXmlHandle docHandle(&doc);

	auto contents = docHandle.
		FirstChild(). //message
		Child(1);	  //contents

	std::map<int, int> procedureIndex;

	//dentalProcedures
	for (int i = 2; contents.Child(i).ToElement(); i++)
	{
		//sequence
		auto sequence = std::stoi(contents.Child(i).Child(0).ToElement()->Attribute("value"));
		//index
		auto hisIdx = std::stoi(contents.Child(i).Child(1).ToElement()->Attribute("value"));

#ifdef sendAutoGeneratedExam
		if (sequence == 1) continue; //the first procedure is always the initial status
#endif
		
		if (sequence >= 999) continue;

		procedureIndex[sequence-2] = hisIdx;
	}

	m_callback(procedureIndex);
}

bool EDental::Cancel::sendRequest(const std::string& nrn, std::function<void(bool)> success)
{
	m_callback = success;

	auto reason = ModalDialogBuilder::inputDialog(
		"Основание за анулиране на денталния преглед:",
		"Анулиране на дентален преглед"
	);

	if (reason.empty()) return false;

	std::string contents =
		bind("nrnDental", nrn)
		+ bind("cancelReason", reason);

	return HisService::sendRequestToHis(contents);
}

void EDental::Cancel::parseReply(const std::string& reply)
{
	auto errors = getErrors(reply);

	if (errors.size()) {
		ModalDialogBuilder::showError(errors);
		m_callback = nullptr;
		return;
	}

	TiXmlDocument doc;

	doc.Parse(reply.data(), 0, TIXML_ENCODING_UTF8);

	TiXmlHandle docHandle(&doc);

	auto status = docHandle.
		FirstChild(). //message
		Child(1).	  //contents
		Child(1).ToElement(); //status

	if (
		status &&
		status->FirstAttribute()->IntValue() == 3
		)
	{
		m_callback(true); return;
	}

	m_callback(false);

}


bool EDental::GetStatus::sendRequest(const Patient& patient, std::function<void(const ToothContainer&)> callback)
{
	m_callback = callback;

	std::string contents =
		bind("identifierType", patient.type) +
		bind("identifier", patient.id) +
		bind("fromDate", Date().to8601()) +
		bind("toDate", Date::currentDate().to8601()) +
		bind("practiceNumber", User::practice().rziCode)
		;

	return HisService::sendRequestToHis(contents);
}

//using this implementation, until NHIS fix the bug in their API
void EDental::GetStatus::parseReply(const std::string& reply)
{
	if (reply.empty()) {
		m_callback = nullptr;
		return;
	}

	auto errors = getErrors(reply);

	if (errors.size()) {
		ModalDialogBuilder::showError(errors);
		m_callback = nullptr;
		return;
	}

	TiXmlDocument doc;

	doc.Parse(reply.data(), 0, TIXML_ENCODING_UTF8);

	m_callback(HISHistoryAlgorithms::getToothStatus(doc));

	m_callback = nullptr;
	

}

void EDental::GetProcedures::parseReply(const std::string& reply)
{
	if (reply.empty()) {
		m_callback = nullptr;
		return;
	}

	if (reply.empty()) {
		m_callback({});
		return;
	}

	auto errors = getErrors(reply);

	if (errors.size()) {
		if (show_dialogs) {
			ModalDialogBuilder::showError(errors);
		}
		m_callback = nullptr;
		return;
	}

	TiXmlDocument doc;

	doc.Parse(reply.data(), 0, TIXML_ENCODING_UTF8);

	m_callback(HISHistoryAlgorithms::getProcedures(doc));

	m_callback = nullptr;

}

bool EDental::GetProcedures::sendRequest(const Patient& patient, bool showDialogs, decltype(m_callback) callback)
{

	this->show_dialogs = showDialogs;

	m_callback = callback;

	std::string contents =
		bind("identifierType", patient.type) +
		bind("identifier", patient.id) +
		bind("fromDate", "2023-05-01") +
		bind("toDate", Date::currentDate().to8601()) +
		bind("practiceNumber", User::practice().rziCode)
		;

	return HisService::sendRequestToHis(contents);
}

#include "HISHistoryAlgorithms.h"

void EDental::GetStatusAndProcedures::parseReply(const std::string& reply)
{
	if (reply.empty()) {
		m_callback = nullptr;
		return;
	}

	if (reply.empty()) {
		m_callback({}, {});
		return;
	}

	auto errors = getErrors(reply);

	if (errors.size()) {
		if (show_dialogs) {
			ModalDialogBuilder::showError(errors);
		}
		m_callback = nullptr;
		return;
	}

	TiXmlDocument doc;

	doc.Parse(reply.data(), 0, TIXML_ENCODING_UTF8);

	m_callback(HISHistoryAlgorithms::getProcedures(doc), HISHistoryAlgorithms::getToothStatus(doc));

	m_callback = nullptr;
}

bool EDental::GetStatusAndProcedures::sendRequest(const Patient& patient,bool showDialogs, decltype(m_callback) callback)
{
	this->show_dialogs = showDialogs;

	m_callback = callback;

	std::string contents =
		bind("identifierType", patient.type) +
		bind("identifier", patient.id) +
		bind("fromDate", "2023-05-01") +
		bind("toDate", Date::currentDate().to8601()) +
		bind("practiceNumber", User::practice().rziCode)
		;

	return HisService::sendRequestToHis(contents);
}
